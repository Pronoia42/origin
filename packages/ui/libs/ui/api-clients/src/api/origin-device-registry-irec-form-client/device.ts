/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Origin Device Registry I-REC Form API
 * Swagger documentation for the Origin Device Registry I-REC Form API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  DeviceDTO,
  DeviceControllerGetAllParams,
  CreateDeviceDTO,
  DeviceControllerGetMyDevicesParams,
  DeviceControllerGetParams,
  SuccessResponseDTO,
  UpdateDeviceStatusDTO,
  SmartMeterReadDTO,
} from './originDeviceRegistryIRECFormAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const deviceControllerGetAll = <Data = unknown>(
  params?: DeviceControllerGetAllParams
) => {
  return customMutator<Data extends unknown ? DeviceDTO[] : Data>({
    url: `/api/Device`,
    method: 'get',
    params,
  });
};

export const getDeviceControllerGetAllQueryKey = (
  params?: DeviceControllerGetAllParams
) => [`/api/Device`, ...(params ? [params] : [])];

export const useDeviceControllerGetAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  params?: DeviceControllerGetAllParams,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetAll>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetAllQueryKey(params);

  const query = useQuery<AsyncReturnType<typeof deviceControllerGetAll>, Error>(
    queryKey,
    () => deviceControllerGetAll<Data>(params),
    queryConfig
  );

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerCreateDevice = <Data = unknown>(
  createDeviceDTO: CreateDeviceDTO
) => {
  return customMutator<Data extends unknown ? DeviceDTO : Data>({
    url: `/api/Device`,
    method: 'post',
    data: createDeviceDTO,
  });
};

export const useDeviceControllerCreateDevice = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceControllerCreateDevice>,
    Error,
    { data: CreateDeviceDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceControllerCreateDevice>,
    Error,
    { data: CreateDeviceDTO }
  >((props) => {
    const { data } = props || {};

    return deviceControllerCreateDevice<Data>(data);
  }, mutationConfig);
};
export const deviceControllerGetMyDevices = <Data = unknown>(
  params?: DeviceControllerGetMyDevicesParams
) => {
  return customMutator<Data extends unknown ? DeviceDTO[] : Data>({
    url: `/api/Device/my-devices`,
    method: 'get',
    params,
  });
};

export const getDeviceControllerGetMyDevicesQueryKey = (
  params?: DeviceControllerGetMyDevicesParams
) => [`/api/Device/my-devices`, ...(params ? [params] : [])];

export const useDeviceControllerGetMyDevices = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  params?: DeviceControllerGetMyDevicesParams,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetMyDevices>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetMyDevicesQueryKey(params);

  const query = useQuery<
    AsyncReturnType<typeof deviceControllerGetMyDevices>,
    Error
  >(queryKey, () => deviceControllerGetMyDevices<Data>(params), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerGet = <Data = unknown>(
  id: string,
  params?: DeviceControllerGetParams
) => {
  return customMutator<Data extends unknown ? DeviceDTO : Data>({
    url: `/api/Device/${id}`,
    method: 'get',
    params,
  });
};

export const getDeviceControllerGetQueryKey = (
  id: string,
  params?: DeviceControllerGetParams
) => [`/api/Device/${id}`, ...(params ? [params] : [])];

export const useDeviceControllerGet = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  params?: DeviceControllerGetParams,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGet>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetQueryKey(id, params);

  const query = useQuery<AsyncReturnType<typeof deviceControllerGet>, Error>(
    queryKey,
    () => deviceControllerGet<Data>(id, params),
    { enabled: !!id, ...queryConfig }
  );

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerDelete = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/Device/${id}`,
    method: 'delete',
  });
};

export const useDeviceControllerDelete = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceControllerDelete>,
    Error,
    { id: string }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceControllerDelete>,
    Error,
    { id: string }
  >((props) => {
    const { id } = props || {};

    return deviceControllerDelete<Data>(id);
  }, mutationConfig);
};
export const deviceControllerUpdateDeviceStatus = <Data = unknown>(
  id: string,
  updateDeviceStatusDTO: UpdateDeviceStatusDTO
) => {
  return customMutator<Data extends unknown ? DeviceDTO : Data>({
    url: `/api/Device/${id}`,
    method: 'put',
    data: updateDeviceStatusDTO,
  });
};

export const useDeviceControllerUpdateDeviceStatus = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceControllerUpdateDeviceStatus>,
    Error,
    { id: string; data: UpdateDeviceStatusDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceControllerUpdateDeviceStatus>,
    Error,
    { id: string; data: UpdateDeviceStatusDTO }
  >((props) => {
    const { id, data } = props || {};

    return deviceControllerUpdateDeviceStatus<Data>(id, data);
  }, mutationConfig);
};
export const deviceControllerGetAllSmartMeterReadings = <Data = unknown>(
  id: string
) => {
  return customMutator<Data extends unknown ? SmartMeterReadDTO[] : Data>({
    url: `/api/Device/${id}/smartMeterReading`,
    method: 'get',
  });
};

export const getDeviceControllerGetAllSmartMeterReadingsQueryKey = (
  id: string
) => [`/api/Device/${id}/smartMeterReading`];

export const useDeviceControllerGetAllSmartMeterReadings = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetAllSmartMeterReadings>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetAllSmartMeterReadingsQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof deviceControllerGetAllSmartMeterReadings>,
    Error
  >(queryKey, () => deviceControllerGetAllSmartMeterReadings<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerAddSmartMeterReads = <Data = unknown>(
  id: string,
  smartMeterReadDTO: SmartMeterReadDTO[]
) => {
  return customMutator<Data extends unknown ? SuccessResponseDTO : Data>({
    url: `/api/Device/${id}/smartMeterReading`,
    method: 'put',
    data: smartMeterReadDTO,
  });
};

export const useDeviceControllerAddSmartMeterReads = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceControllerAddSmartMeterReads>,
    Error,
    { id: string; data: SmartMeterReadDTO[] }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceControllerAddSmartMeterReads>,
    Error,
    { id: string; data: SmartMeterReadDTO[] }
  >((props) => {
    const { id, data } = props || {};

    return deviceControllerAddSmartMeterReads<Data>(id, data);
  }, mutationConfig);
};
export const deviceControllerGetByExternalId = <Data = unknown>(
  type: string,
  id: string
) => {
  return customMutator<Data extends unknown ? DeviceDTO : Data>({
    url: `/api/Device/get-by-external-id/${type}/${id}`,
    method: 'get',
  });
};

export const getDeviceControllerGetByExternalIdQueryKey = (
  type: string,
  id: string
) => [`/api/Device/get-by-external-id/${type}/${id}`];

export const useDeviceControllerGetByExternalId = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  type: string,
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetByExternalId>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetByExternalIdQueryKey(type, id);

  const query = useQuery<
    AsyncReturnType<typeof deviceControllerGetByExternalId>,
    Error
  >(queryKey, () => deviceControllerGetByExternalId<Data>(type, id), {
    enabled: !!(type && id),
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

openapi: '3.0.0'
info:
  title: 'Origin Device Registry I-REC Form API'
  description: 'Swagger documentation for the Origin Device Registry I-REC Form API'
  version: '0.1'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    access-token:
      scheme: 'bearer'
      bearerFormat: 'JWT'
      type: 'http'
  schemas:
    ExternalDeviceIdTypeDTO:
      type: 'object'
      properties:
        type:
          type: 'string'
        autogenerated:
          type: 'boolean'
        required:
          type: 'boolean'
      required:
        - 'type'
    ConfigurationDTO:
      type: 'object'
      properties:
        countryName:
          type: 'string'
        currencies:
          type: 'array'
          items:
            type: 'string'
        regions:
          type: 'object'
        externalDeviceIdTypes:
          type: 'array'
          items:
            $ref: '#/components/schemas/ExternalDeviceIdTypeDTO'
        complianceStandard:
          type: 'string'
        deviceTypes:
          type: 'array'
          items:
            type: 'array'
            items:
              type: 'string'
        gridOperators:
          type: 'array'
          items:
            type: 'string'
    DeviceStatus:
      type: 'string'
      enum:
        - 'Submitted'
        - 'Denied'
        - 'Active'
    SmartMeterReadDTO:
      type: 'object'
      properties:
        meterReading:
          type: 'string'
        timestamp:
          type: 'number'
      required:
        - 'meterReading'
        - 'timestamp'
    ExternalDeviceIdDTO:
      type: 'object'
      properties:
        id:
          type: 'string'
        type:
          type: 'string'
      required:
        - 'id'
        - 'type'
    SmartMeterStatsDTO:
      type: 'object'
      properties:
        certified:
          type: 'string'
        uncertified:
          type: 'string'
      required:
        - 'certified'
        - 'uncertified'
    DeviceDTO:
      type: 'object'
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
        facilityName:
          type: 'string'
        description:
          type: 'string'
        images:
          type: 'string'
        address:
          type: 'string'
        capacityInW:
          type: 'number'
        gpsLatitude:
          type: 'string'
        gpsLongitude:
          type: 'string'
        timezone:
          type: 'string'
        complianceRegistry:
          type: 'string'
        otherGreenAttributes:
          type: 'string'
        typeOfPublicSupport:
          type: 'string'
        deviceType:
          type: 'string'
        region:
          type: 'string'
        province:
          type: 'string'
        country:
          type: 'string'
        operationalSince:
          type: 'number'
        gridOperator:
          type: 'string'
        smartMeterReads:
          type: 'array'
          items:
            $ref: '#/components/schemas/SmartMeterReadDTO'
        files:
          type: 'string'
        externalDeviceIds:
          type: 'array'
          items:
            $ref: '#/components/schemas/ExternalDeviceIdDTO'
        deviceGroup:
          type: 'string'
        id:
          type: 'number'
        meterStats:
          $ref: '#/components/schemas/SmartMeterStatsDTO'
        organizationId:
          type: 'number'
      required:
        - 'status'
        - 'facilityName'
        - 'description'
        - 'images'
        - 'address'
        - 'capacityInW'
        - 'gpsLatitude'
        - 'gpsLongitude'
        - 'timezone'
        - 'complianceRegistry'
        - 'otherGreenAttributes'
        - 'typeOfPublicSupport'
        - 'deviceType'
        - 'region'
        - 'province'
        - 'country'
        - 'operationalSince'
        - 'gridOperator'
        - 'id'
        - 'organizationId'
    CreateDeviceDTO:
      type: 'object'
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
        facilityName:
          type: 'string'
        description:
          type: 'string'
        images:
          type: 'string'
        address:
          type: 'string'
        capacityInW:
          type: 'number'
        gpsLatitude:
          type: 'string'
        gpsLongitude:
          type: 'string'
        timezone:
          type: 'string'
        complianceRegistry:
          type: 'string'
        otherGreenAttributes:
          type: 'string'
        typeOfPublicSupport:
          type: 'string'
        deviceType:
          type: 'string'
        region:
          type: 'string'
        province:
          type: 'string'
        country:
          type: 'string'
        operationalSince:
          type: 'number'
        gridOperator:
          type: 'string'
        smartMeterReads:
          type: 'array'
          items:
            $ref: '#/components/schemas/SmartMeterReadDTO'
        files:
          type: 'string'
        externalDeviceIds:
          type: 'array'
          items:
            $ref: '#/components/schemas/ExternalDeviceIdDTO'
        deviceGroup:
          type: 'string'
      required:
        - 'status'
        - 'facilityName'
        - 'description'
        - 'images'
        - 'address'
        - 'capacityInW'
        - 'gpsLatitude'
        - 'gpsLongitude'
        - 'timezone'
        - 'complianceRegistry'
        - 'otherGreenAttributes'
        - 'typeOfPublicSupport'
        - 'deviceType'
        - 'region'
        - 'province'
        - 'country'
        - 'operationalSince'
        - 'gridOperator'
    SuccessResponseDTO:
      type: 'object'
      properties:
        success:
          type: 'boolean'
        message:
          type: 'string'
      required:
        - 'success'
    UpdateDeviceStatusDTO:
      type: 'object'
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
      required:
        - 'status'
paths:
  /api/configuration:
    get:
      operationId: 'ConfigurationController_get'
      parameters: []
      responses:
        200:
          description: 'Returns the Configuration'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationDTO'
      tags:
        - 'configuration'
      security:
        - access-token: []
    put:
      operationId: 'ConfigurationController_update'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationDTO'
      responses:
        200:
          description: 'Updates the Configuration'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationDTO'
      tags:
        - 'configuration'
      security:
        - access-token: []
  /api/Device:
    get:
      operationId: 'DeviceController_getAll'
      parameters:
        - name: 'withMeterStats'
          required: false
          in: 'query'
          description: 'Whether or not to return smart meter stats with the device'
          schema:
            type: 'boolean'
      responses:
        200:
          description: 'Returns all Devices'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/DeviceDTO'
      tags:
        - 'device'
      security:
        - access-token: []
    post:
      operationId: 'DeviceController_createDevice'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceDTO'
      responses:
        201:
          description: 'Creates a Device'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDTO'
        403:
          description: "User doesn't have the correct permissions"
        422:
          description: 'Incorrect inputs'
      tags:
        - 'device'
      security:
        - access-token: []
  /api/Device/my-devices:
    get:
      operationId: 'DeviceController_getMyDevices'
      parameters:
        - name: 'withMeterStats'
          required: false
          in: 'query'
          description: 'Whether or not to return smart meter stats with the device'
          schema:
            type: 'boolean'
      responses:
        200:
          description: 'Returns my Devices'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/DeviceDTO'
      tags:
        - 'device'
      security:
        - access-token: []
  /api/Device/{id}:
    get:
      operationId: 'DeviceController_get'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
        - name: 'withMeterStats'
          required: false
          in: 'query'
          description: 'Whether or not to return smart meter stats with the device'
          schema:
            type: 'boolean'
      responses:
        200:
          description: 'Returns a Device'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDTO'
        404:
          description: "The device with the ID doesn't exist"
      tags:
        - 'device'
      security:
        - access-token: []
    delete:
      operationId: 'DeviceController_delete'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Deletes a Device'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        401:
          description: 'You are not the organization admin'
        404:
          description: "The device with the ID doesn't exist"
      tags:
        - 'device'
      security:
        - access-token: []
    put:
      operationId: 'DeviceController_updateDeviceStatus'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceStatusDTO'
      responses:
        200:
          description: "Updates a device's status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDTO'
        404:
          description: 'Non existent device'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
      tags:
        - 'device'
      security:
        - access-token: []
  /api/Device/{id}/smartMeterReading:
    get:
      operationId: 'DeviceController_getAllSmartMeterReadings'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Gets smart meter readings for a Device'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/SmartMeterReadDTO'
        404:
          description: "The device with the ID doesn't exist"
      tags:
        - 'device'
      security:
        - access-token: []
    put:
      operationId: 'DeviceController_addSmartMeterReads'
      parameters:
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'array'
              items:
                $ref: '#/components/schemas/SmartMeterReadDTO'
      responses:
        200:
          description: 'Adds smart meter readings to a Device'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        401:
          description: 'You are not the device manager'
        404:
          description: "The device with the ID doesn't exist"
      tags:
        - 'device'
      security:
        - access-token: []
  /api/Device/get-by-external-id/{type}/{id}:
    get:
      operationId: 'DeviceController_getByExternalId'
      parameters:
        - name: 'type'
          required: true
          in: 'path'
          schema:
            type: 'string'
        - name: 'id'
          required: true
          in: 'path'
          schema:
            type: 'string'
      responses:
        200:
          description: 'Gets a Device by external device ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDTO'
        404:
          description: "The device with the ID doesn't exist"
      tags:
        - 'device'
      security:
        - access-token: []

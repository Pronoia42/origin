/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Origin Device Registry I-REC Local API
 * Swagger documentation for the Origin Device Registry I-REC Local API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  PublicDeviceDTO,
  DeviceDTO,
  CreateDeviceDTO,
  CodeNameDTO,
  UpdateDeviceDTO,
  IrecDeviceDTO,
  ImportIrecDeviceDTO,
} from './originDeviceRegistryIRECLocalAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const deviceControllerGetAll = <Data = unknown>() => {
  return customMutator<Data extends unknown ? PublicDeviceDTO[] : Data>({
    url: `/api/irec/device-registry`,
    method: 'get',
  });
};

export const getDeviceControllerGetAllQueryKey = () => [
  `/api/irec/device-registry`,
];

export const useDeviceControllerGetAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetAll>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetAllQueryKey();

  const query = useQuery<AsyncReturnType<typeof deviceControllerGetAll>, Error>(
    queryKey,
    () => deviceControllerGetAll<Data>(),
    queryConfig
  );

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerCreateDevice = <Data = unknown>(
  createDeviceDTO: CreateDeviceDTO
) => {
  return customMutator<Data extends unknown ? DeviceDTO : Data>({
    url: `/api/irec/device-registry`,
    method: 'post',
    data: createDeviceDTO,
  });
};

export const useDeviceControllerCreateDevice = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceControllerCreateDevice>,
    Error,
    { data: CreateDeviceDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceControllerCreateDevice>,
    Error,
    { data: CreateDeviceDTO }
  >((props) => {
    const { data } = props || {};

    return deviceControllerCreateDevice<Data>(data);
  }, mutationConfig);
};
export const deviceControllerGetFuels = <Data = unknown>() => {
  return customMutator<Data extends unknown ? CodeNameDTO[] : Data>({
    url: `/api/irec/device-registry/device-type`,
    method: 'get',
  });
};

export const getDeviceControllerGetFuelsQueryKey = () => [
  `/api/irec/device-registry/device-type`,
];

export const useDeviceControllerGetFuels = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetFuels>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetFuelsQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof deviceControllerGetFuels>,
    Error
  >(queryKey, () => deviceControllerGetFuels<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerGetFuelTypes = <Data = unknown>() => {
  return customMutator<Data extends unknown ? CodeNameDTO[] : Data>({
    url: `/api/irec/device-registry/fuel-type`,
    method: 'get',
  });
};

export const getDeviceControllerGetFuelTypesQueryKey = () => [
  `/api/irec/device-registry/fuel-type`,
];

export const useDeviceControllerGetFuelTypes = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetFuelTypes>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetFuelTypesQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof deviceControllerGetFuelTypes>,
    Error
  >(queryKey, () => deviceControllerGetFuelTypes<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerGet = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? PublicDeviceDTO : Data>({
    url: `/api/irec/device-registry/device/${id}`,
    method: 'get',
  });
};

export const getDeviceControllerGetQueryKey = (id: string) => [
  `/api/irec/device-registry/device/${id}`,
];

export const useDeviceControllerGet = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGet>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetQueryKey(id);

  const query = useQuery<AsyncReturnType<typeof deviceControllerGet>, Error>(
    queryKey,
    () => deviceControllerGet<Data>(id),
    { enabled: !!id, ...queryConfig }
  );

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerUpdateDevice = <Data = unknown>(
  id: string,
  updateDeviceDTO: UpdateDeviceDTO
) => {
  return customMutator<Data extends unknown ? DeviceDTO : Data>({
    url: `/api/irec/device-registry/device/${id}`,
    method: 'put',
    data: updateDeviceDTO,
  });
};

export const useDeviceControllerUpdateDevice = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceControllerUpdateDevice>,
    Error,
    { id: string; data: UpdateDeviceDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceControllerUpdateDevice>,
    Error,
    { id: string; data: UpdateDeviceDTO }
  >((props) => {
    const { id, data } = props || {};

    return deviceControllerUpdateDevice<Data>(id, data);
  }, mutationConfig);
};
export const deviceControllerGetMyDevices = <Data = unknown>() => {
  return customMutator<Data extends unknown ? DeviceDTO[] : Data>({
    url: `/api/irec/device-registry/my-devices`,
    method: 'get',
  });
};

export const getDeviceControllerGetMyDevicesQueryKey = () => [
  `/api/irec/device-registry/my-devices`,
];

export const useDeviceControllerGetMyDevices = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetMyDevices>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetMyDevicesQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof deviceControllerGetMyDevices>,
    Error
  >(queryKey, () => deviceControllerGetMyDevices<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerGetDevicesToImportFromIrec = <
  Data = unknown
>() => {
  return customMutator<Data extends unknown ? IrecDeviceDTO[] : Data>({
    url: `/api/irec/device-registry/irec-devices-to-import`,
    method: 'get',
  });
};

export const getDeviceControllerGetDevicesToImportFromIrecQueryKey = () => [
  `/api/irec/device-registry/irec-devices-to-import`,
];

export const useDeviceControllerGetDevicesToImportFromIrec = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceControllerGetDevicesToImportFromIrec>,
    Error
  >
) => {
  const queryKey = getDeviceControllerGetDevicesToImportFromIrecQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof deviceControllerGetDevicesToImportFromIrec>,
    Error
  >(
    queryKey,
    () => deviceControllerGetDevicesToImportFromIrec<Data>(),
    queryConfig
  );

  return {
    queryKey,
    ...query,
  };
};

export const deviceControllerImportIrecDevice = <Data = unknown>(
  importIrecDeviceDTO: ImportIrecDeviceDTO
) => {
  return customMutator<Data extends unknown ? DeviceDTO : Data>({
    url: `/api/irec/device-registry/import-irec-device`,
    method: 'post',
    data: importIrecDeviceDTO,
  });
};

export const useDeviceControllerImportIrecDevice = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceControllerImportIrecDevice>,
    Error,
    { data: ImportIrecDeviceDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceControllerImportIrecDevice>,
    Error,
    { data: ImportIrecDeviceDTO }
  >((props) => {
    const { data } = props || {};

    return deviceControllerImportIrecDevice<Data>(data);
  }, mutationConfig);
};

/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Origin Energy API
 * Swagger documentation for the Origin Energy API for reading and storing metered data
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  ReadDTO,
  ReadsControllerGetReadsParams,
  MeasurementDTO,
  ReadsControllerGetReadsDifferenceParams,
  AggregatedReadDTO,
  ReadsControllerGetReadsAggregatesParams,
} from './originEnergyAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const readsControllerGetReads = <Data = unknown>(
  meter: string,
  params?: ReadsControllerGetReadsParams
) => {
  return customMutator<Data extends unknown ? ReadDTO[] : Data>({
    url: `/api/meter-reads/${meter}`,
    method: 'get',
    params,
  });
};

export const getReadsControllerGetReadsQueryKey = (
  meter: string,
  params?: ReadsControllerGetReadsParams
) => [`/api/meter-reads/${meter}`, ...(params ? [params] : [])];

export const useReadsControllerGetReads = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  meter: string,
  params?: ReadsControllerGetReadsParams,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof readsControllerGetReads>,
    Error
  >
) => {
  const queryKey = getReadsControllerGetReadsQueryKey(meter, params);

  const query = useQuery<
    AsyncReturnType<typeof readsControllerGetReads>,
    Error
  >(queryKey, () => readsControllerGetReads<Data>(meter, params), {
    enabled: !!meter,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const readsControllerStoreReads = <Data = unknown>(
  meter: string,
  measurementDTO: MeasurementDTO
) => {
  return customMutator<Data extends unknown ? unknown : Data>({
    url: `/api/meter-reads/${meter}`,
    method: 'post',
    data: measurementDTO,
  });
};

export const useReadsControllerStoreReads = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof readsControllerStoreReads>,
    Error,
    { meter: string; data: MeasurementDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof readsControllerStoreReads>,
    Error,
    { meter: string; data: MeasurementDTO }
  >((props) => {
    const { meter, data } = props || {};

    return readsControllerStoreReads<Data>(meter, data);
  }, mutationConfig);
};
export const readsControllerGetReadsDifference = <Data = unknown>(
  meter: string,
  params?: ReadsControllerGetReadsDifferenceParams
) => {
  return customMutator<Data extends unknown ? ReadDTO[] : Data>({
    url: `/api/meter-reads/${meter}/difference`,
    method: 'get',
    params,
  });
};

export const getReadsControllerGetReadsDifferenceQueryKey = (
  meter: string,
  params?: ReadsControllerGetReadsDifferenceParams
) => [`/api/meter-reads/${meter}/difference`, ...(params ? [params] : [])];

export const useReadsControllerGetReadsDifference = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  meter: string,
  params?: ReadsControllerGetReadsDifferenceParams,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof readsControllerGetReadsDifference>,
    Error
  >
) => {
  const queryKey = getReadsControllerGetReadsDifferenceQueryKey(meter, params);

  const query = useQuery<
    AsyncReturnType<typeof readsControllerGetReadsDifference>,
    Error
  >(queryKey, () => readsControllerGetReadsDifference<Data>(meter, params), {
    enabled: !!meter,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const readsControllerGetReadsAggregates = <Data = unknown>(
  meter: string,
  params?: ReadsControllerGetReadsAggregatesParams
) => {
  return customMutator<Data extends unknown ? AggregatedReadDTO[] : Data>({
    url: `/api/meter-reads/${meter}/aggregate`,
    method: 'get',
    params,
  });
};

export const getReadsControllerGetReadsAggregatesQueryKey = (
  meter: string,
  params?: ReadsControllerGetReadsAggregatesParams
) => [`/api/meter-reads/${meter}/aggregate`, ...(params ? [params] : [])];

export const useReadsControllerGetReadsAggregates = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  meter: string,
  params?: ReadsControllerGetReadsAggregatesParams,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof readsControllerGetReadsAggregates>,
    Error
  >
) => {
  const queryKey = getReadsControllerGetReadsAggregatesQueryKey(meter, params);

  const query = useQuery<
    AsyncReturnType<typeof readsControllerGetReadsAggregates>,
    Error
  >(queryKey, () => readsControllerGetReadsAggregates<Data>(meter, params), {
    enabled: !!meter,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Exchange API
 * Swagger documentation for the Exchange API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  SupplyDto,
  CreateSupplyDto,
  UpdateSupplyDto,
} from './exchangeAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const supplyControllerCreate = <Data = unknown>(
  createSupplyDto: CreateSupplyDto
) => {
  return customMutator<Data extends unknown ? SupplyDto[] : Data>({
    url: `/api/supply`,
    method: 'post',
    data: createSupplyDto,
  });
};

export const useSupplyControllerCreate = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof supplyControllerCreate>,
    Error,
    { data: CreateSupplyDto }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof supplyControllerCreate>,
    Error,
    { data: CreateSupplyDto }
  >((props) => {
    const { data } = props || {};

    return supplyControllerCreate<Data>(data);
  }, mutationConfig);
};
export const supplyControllerFindAll = <Data = unknown>() => {
  return customMutator<Data extends unknown ? SupplyDto[] : Data>({
    url: `/api/supply`,
    method: 'get',
  });
};

export const getSupplyControllerFindAllQueryKey = () => [`/api/supply`];

export const useSupplyControllerFindAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof supplyControllerFindAll>,
    Error
  >
) => {
  const queryKey = getSupplyControllerFindAllQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof supplyControllerFindAll>,
    Error
  >(queryKey, () => supplyControllerFindAll<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const supplyControllerFindOne = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? SupplyDto[] : Data>({
    url: `/api/supply/${id}`,
    method: 'get',
  });
};

export const getSupplyControllerFindOneQueryKey = (id: string) => [
  `/api/supply/${id}`,
];

export const useSupplyControllerFindOne = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof supplyControllerFindOne>,
    Error
  >
) => {
  const queryKey = getSupplyControllerFindOneQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof supplyControllerFindOne>,
    Error
  >(queryKey, () => supplyControllerFindOne<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};

export const supplyControllerUpdate = <Data = unknown>(
  id: string,
  updateSupplyDto: UpdateSupplyDto
) => {
  return customMutator<Data extends unknown ? SupplyDto[] : Data>({
    url: `/api/supply/${id}`,
    method: 'put',
    data: updateSupplyDto,
  });
};

export const useSupplyControllerUpdate = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof supplyControllerUpdate>,
    Error,
    { id: string; data: UpdateSupplyDto }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof supplyControllerUpdate>,
    Error,
    { id: string; data: UpdateSupplyDto }
  >((props) => {
    const { id, data } = props || {};

    return supplyControllerUpdate<Data>(id, data);
  }, mutationConfig);
};
export const supplyControllerRemove = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? unknown : Data>({
    url: `/api/supply/${id}`,
    method: 'delete',
  });
};

export const useSupplyControllerRemove = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof supplyControllerRemove>,
    Error,
    { id: string }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof supplyControllerRemove>,
    Error,
    { id: string }
  >((props) => {
    const { id } = props || {};

    return supplyControllerRemove<Data>(id);
  }, mutationConfig);
};

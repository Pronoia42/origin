/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Origin Device Registry I-REC Form API
 * Swagger documentation for the Origin Device Registry I-REC Form API
 * OpenAPI spec version: 0.1
 */
export interface ExternalDeviceIdTypeDTO {
  type: string;
  autogenerated?: boolean;
  required?: boolean;
}

export type ConfigurationDTORegions = {};

export interface ConfigurationDTO {
  countryName?: string;
  currencies?: string[];
  regions?: ConfigurationDTORegions;
  externalDeviceIdTypes?: ExternalDeviceIdTypeDTO[];
  complianceStandard?: string;
  deviceTypes?: string[][];
  gridOperators?: string[];
}

export type DeviceStatus = 'Submitted' | 'Denied' | 'Active';

export const DeviceStatus = {
  Submitted: 'Submitted' as DeviceStatus,
  Denied: 'Denied' as DeviceStatus,
  Active: 'Active' as DeviceStatus,
};

export interface SmartMeterReadDTO {
  meterReading: string;
  timestamp: number;
}

export interface ExternalDeviceIdDTO {
  id: string;
  type: string;
}

export interface SmartMeterStatsDTO {
  certified: string;
  uncertified: string;
}

export interface DeviceDTO {
  status: DeviceStatus;
  facilityName: string;
  description: string;
  images: string;
  address: string;
  capacityInW: number;
  gpsLatitude: string;
  gpsLongitude: string;
  timezone: string;
  complianceRegistry: string;
  otherGreenAttributes: string;
  typeOfPublicSupport: string;
  deviceType: string;
  region: string;
  province: string;
  country: string;
  operationalSince: number;
  gridOperator: string;
  smartMeterReads?: SmartMeterReadDTO[];
  files?: string;
  externalDeviceIds?: ExternalDeviceIdDTO[];
  deviceGroup?: string;
  id: number;
  meterStats?: SmartMeterStatsDTO;
  organizationId: number;
}

export interface CreateDeviceDTO {
  status: DeviceStatus;
  facilityName: string;
  description: string;
  images: string;
  address: string;
  capacityInW: number;
  gpsLatitude: string;
  gpsLongitude: string;
  timezone: string;
  complianceRegistry: string;
  otherGreenAttributes: string;
  typeOfPublicSupport: string;
  deviceType: string;
  region: string;
  province: string;
  country: string;
  operationalSince: number;
  gridOperator: string;
  smartMeterReads?: SmartMeterReadDTO[];
  files?: string;
  externalDeviceIds?: ExternalDeviceIdDTO[];
  deviceGroup?: string;
}

export interface SuccessResponseDTO {
  success: boolean;
  message?: string;
}

export interface UpdateDeviceStatusDTO {
  status: DeviceStatus;
}

export type DeviceControllerGetAllParams = { withMeterStats?: boolean };

export type DeviceControllerGetMyDevicesParams = { withMeterStats?: boolean };

export type DeviceControllerGetParams = { withMeterStats?: boolean };

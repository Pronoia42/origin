/*
 * Generated by orval v5.0.0-alpha.9 üç∫
 * Do not edit manually.
 * Origin Device Registry API
 * Swagger documentation for the Origin Device Registry API
 * OpenAPI spec version: 0.1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
} from 'react-query';
import type {
  OriginDeviceDTO,
  NewDeviceDTO,
} from './originDeviceRegistryAPI.schemas';
import { customMutator } from '../mutator/custom-mutator';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const deviceRegistryControllerGetAll = <Data = unknown>() => {
  return customMutator<Data extends unknown ? OriginDeviceDTO[] : Data>({
    url: `/api/device-registry`,
    method: 'get',
  });
};

export const getDeviceRegistryControllerGetAllQueryKey = () => [
  `/api/device-registry`,
];

export const useDeviceRegistryControllerGetAll = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceRegistryControllerGetAll>,
    Error
  >
) => {
  const queryKey = getDeviceRegistryControllerGetAllQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof deviceRegistryControllerGetAll>,
    Error
  >(queryKey, () => deviceRegistryControllerGetAll<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const deviceRegistryControllerCreateDevice = <Data = unknown>(
  newDeviceDTO: NewDeviceDTO
) => {
  return customMutator<Data extends unknown ? string : Data>({
    url: `/api/device-registry`,
    method: 'post',
    data: newDeviceDTO,
  });
};

export const useDeviceRegistryControllerCreateDevice = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  mutationConfig?: UseMutationOptions<
    AsyncReturnType<typeof deviceRegistryControllerCreateDevice>,
    Error,
    { data: NewDeviceDTO }
  >
) => {
  return useMutation<
    AsyncReturnType<typeof deviceRegistryControllerCreateDevice>,
    Error,
    { data: NewDeviceDTO }
  >((props) => {
    const { data } = props || {};

    return deviceRegistryControllerCreateDevice<Data>(data);
  }, mutationConfig);
};
export const deviceRegistryControllerGetMyDevices = <Data = unknown>() => {
  return customMutator<Data extends unknown ? OriginDeviceDTO[] : Data>({
    url: `/api/device-registry/my-devices`,
    method: 'get',
  });
};

export const getDeviceRegistryControllerGetMyDevicesQueryKey = () => [
  `/api/device-registry/my-devices`,
];

export const useDeviceRegistryControllerGetMyDevices = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceRegistryControllerGetMyDevices>,
    Error
  >
) => {
  const queryKey = getDeviceRegistryControllerGetMyDevicesQueryKey();

  const query = useQuery<
    AsyncReturnType<typeof deviceRegistryControllerGetMyDevices>,
    Error
  >(queryKey, () => deviceRegistryControllerGetMyDevices<Data>(), queryConfig);

  return {
    queryKey,
    ...query,
  };
};

export const deviceRegistryControllerGet = <Data = unknown>(id: string) => {
  return customMutator<Data extends unknown ? OriginDeviceDTO : Data>({
    url: `/api/device-registry/${id}`,
    method: 'get',
  });
};

export const getDeviceRegistryControllerGetQueryKey = (id: string) => [
  `/api/device-registry/${id}`,
];

export const useDeviceRegistryControllerGet = <
  Data extends unknown = unknown,
  Error extends unknown = unknown
>(
  id: string,
  queryConfig?: UseQueryOptions<
    AsyncReturnType<typeof deviceRegistryControllerGet>,
    Error
  >
) => {
  const queryKey = getDeviceRegistryControllerGetQueryKey(id);

  const query = useQuery<
    AsyncReturnType<typeof deviceRegistryControllerGet>,
    Error
  >(queryKey, () => deviceRegistryControllerGet<Data>(id), {
    enabled: !!id,
    ...queryConfig,
  });

  return {
    queryKey,
    ...query,
  };
};
